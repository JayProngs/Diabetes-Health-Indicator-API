[
  {
    "objectID": "EDA.html",
    "href": "EDA.html",
    "title": "EDA",
    "section": "",
    "text": "The Diabetes Health Indicators Dataset is derived from the Behavioral Risk Factor Surveillance System (BRFSS) 2015 survey. It includes different health-related variables collected from adults in the USA. The dataset is useful for analyzing factors that may indicate diabetes among the population.\nPurpose of EDA: The primary goal of this exploratory data analysis is to understand the relationships between different health indicators and the presence of diabetes. By examining patterns and correlations in the data, we aim to identify key predictors that can be used in a predictive modeling to classify individuals as diabetic or non-diabetic."
  },
  {
    "objectID": "EDA.html#number-of-individuals-with-and-without-diabetes",
    "href": "EDA.html#number-of-individuals-with-and-without-diabetes",
    "title": "EDA",
    "section": "Number of individuals with and without diabetes",
    "text": "Number of individuals with and without diabetes\n\n# Plot the distribution of diabetes status\nggplot(data, aes(x = Diabetes_binary, fill = Diabetes_binary)) +\n  geom_bar() +\n  labs(title = \"Diabetes Prevalence\", x = \"Diabetes Status\", y = \"Count\") +\n  scale_fill_manual(values = c(\"No\" = \"skyblue\", \"Yes\" = \"salmon\")) +\n  theme_minimal()"
  },
  {
    "objectID": "EDA.html#age-distribution-for-diabetes-binary-in-dataset",
    "href": "EDA.html#age-distribution-for-diabetes-binary-in-dataset",
    "title": "EDA",
    "section": "Age Distribution for Diabetes binary in dataset",
    "text": "Age Distribution for Diabetes binary in dataset\n\n# Plot diabetes prevalence across age groups\nggplot(data, aes(x = Age, fill = Diabetes_binary)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Diabetes Prevalence by Age Group\", x = \"Age Group\", y = \"Proportion\") +\n  scale_fill_manual(values = c(\"No\" = \"skyblue\", \"Yes\" = \"salmon\")) +\n  theme_minimal() +\n  coord_flip()"
  },
  {
    "objectID": "EDA.html#bmi-distributions",
    "href": "EDA.html#bmi-distributions",
    "title": "EDA",
    "section": "BMI Distributions",
    "text": "BMI Distributions\n\n# Boxplot of BMI by diabetes status\nggplot(data, aes(x = Diabetes_binary, y = BMI, fill = Diabetes_binary)) +\n  geom_boxplot() +\n  labs(title = \"BMI by Diabetes Status\", x = \"Diabetes Status\", y = \"BMI\") +\n  scale_fill_manual(values = c(\"No\" = \"skyblue\", \"Yes\" = \"salmon\")) +\n  theme_minimal()"
  },
  {
    "objectID": "EDA.html#physical-activity",
    "href": "EDA.html#physical-activity",
    "title": "EDA",
    "section": "Physical activity",
    "text": "Physical activity\n\n# Bar plot of physical activity vs. diabetes status\nggplot(data, aes(x = PhysActivity, fill = Diabetes_binary)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Physical Activity vs. Diabetes Status\", x = \"Physical Activity\", y = \"Proportion\") +\n  scale_fill_manual(values = c(\"No\" = \"skyblue\", \"Yes\" = \"salmon\")) +\n  theme_minimal()"
  },
  {
    "objectID": "EDA.html#smoking-status-and-diabetes",
    "href": "EDA.html#smoking-status-and-diabetes",
    "title": "EDA",
    "section": "Smoking Status and Diabetes",
    "text": "Smoking Status and Diabetes\n\n# Bar plot of smoking status vs. diabetes\nggplot(data, aes(x = Smoker, fill = Diabetes_binary)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Smoking Status vs. Diabetes\", x = \"Smoking Status\", y = \"Proportion\") +\n  scale_fill_manual(values = c(\"No\" = \"skyblue\", \"Yes\" = \"salmon\")) +\n  theme_minimal()"
  },
  {
    "objectID": "EDA.html#general-health-status-and-diabetes",
    "href": "EDA.html#general-health-status-and-diabetes",
    "title": "EDA",
    "section": "General health status and Diabetes",
    "text": "General health status and Diabetes\n\n# Plot of diabetes across general health status\nggplot(data, aes(x = GenHlth, fill = Diabetes_binary)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Diabetes Prevalence by General Health Status\", x = \"General Health\", y = \"Proportion\") +\n  scale_fill_manual(values = c(\"No\" = \"skyblue\", \"Yes\" = \"salmon\")) +\n  theme_minimal()"
  },
  {
    "objectID": "EDA.html#sex-and-diabetes",
    "href": "EDA.html#sex-and-diabetes",
    "title": "EDA",
    "section": "Sex and Diabetes",
    "text": "Sex and Diabetes\n\n# Diabetes prevalence by sex\nggplot(data, aes(x = Sex, fill = Diabetes_binary)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Diabetes Prevalence by Sex\", x = \"Sex\", y = \"Proportion\") +\n  scale_fill_manual(values = c(\"No\" = \"skyblue\", \"Yes\" = \"salmon\")) +\n  theme_minimal()"
  },
  {
    "objectID": "EDA.html#income-and-diabetes",
    "href": "EDA.html#income-and-diabetes",
    "title": "EDA",
    "section": "Income and Diabetes",
    "text": "Income and Diabetes\n\n# Diabetes prevalence by income level\nggplot(data, aes(x = Income, fill = Diabetes_binary)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Diabetes Prevalence by Income Level\", x = \"Income Level\", y = \"Proportion\") +\n  scale_fill_manual(values = c(\"No\" = \"skyblue\", \"Yes\" = \"salmon\")) +\n  theme_minimal() +\n  coord_flip()"
  },
  {
    "objectID": "EDA.html#healthcare-access-and-diabetes",
    "href": "EDA.html#healthcare-access-and-diabetes",
    "title": "EDA",
    "section": "Healthcare access and diabetes",
    "text": "Healthcare access and diabetes\n\n# Diabetes prevalence by healthcare coverage\nggplot(data, aes(x = AnyHealthcare, fill = Diabetes_binary)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Diabetes Prevalence by Healthcare Coverage\", x = \"Has Healthcare\", y = \"Proportion\") +\n  scale_fill_manual(values = c(\"No\" = \"skyblue\", \"Yes\" = \"salmon\")) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n# Select numeric variables\nnumeric_vars &lt;- data %&gt;% select(BMI, MentHlth, PhysHlth)\n\n# Compute correlation matrix\ncor_matrix &lt;- cor(numeric_vars)\n\n# Visualize correlation matrix\nggcorrplot(cor_matrix, lab = TRUE)\n\n\n\n\n\n\n\n\nClick here for the Modeling Page"
  },
  {
    "objectID": "Modelling.html",
    "href": "Modelling.html",
    "title": "Modelling",
    "section": "",
    "text": "In this analysis, we aim to develop predictive models to classify individuals as diabetic or non-diabetic based on various health indicators from the Diabetes Health Indicators Dataset. Using the tidymodels framework in R, we will build and evaluate two types of models:\n\nClassification Tree\nRandom Forest\n\nOur objective is to select the best-performing model based on the log-loss metric, using 5-fold cross-validation on the training data. We will then compare the selected models on a test dataset to determine the overall winner."
  },
  {
    "objectID": "Modelling.html#loading-libraries",
    "href": "Modelling.html#loading-libraries",
    "title": "Modelling",
    "section": "Loading Libraries",
    "text": "Loading Libraries\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.2.1     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n\nlibrary(rpart.plot)\n\nLoading required package: rpart\n\nAttaching package: 'rpart'\n\nThe following object is masked from 'package:dials':\n\n    prune"
  },
  {
    "objectID": "Modelling.html#data-preprocessing",
    "href": "Modelling.html#data-preprocessing",
    "title": "Modelling",
    "section": "Data preprocessing",
    "text": "Data preprocessing\n\ndata &lt;- read_csv(\"diabetes_binary_health_indicators_BRFSS2015.csv\")\n\nRows: 253680 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (22): Diabetes_binary, HighBP, HighChol, CholCheck, BMI, Smoker, Stroke,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Convert variables to factors with labels\ndata &lt;- data %&gt;%\n  mutate(\n    Diabetes_binary = factor(Diabetes_binary, labels = c(\"No\", \"Yes\")),\n    HighBP = factor(HighBP, labels = c(\"No\", \"Yes\")),\n    HighChol = factor(HighChol, labels = c(\"No\", \"Yes\")),\n    CholCheck = factor(CholCheck, labels = c(\"No\", \"Yes\")),\n    Smoker = factor(Smoker, labels = c(\"No\", \"Yes\")),\n    Stroke = factor(Stroke, labels = c(\"No\", \"Yes\")),\n    HeartDiseaseorAttack = factor(HeartDiseaseorAttack, labels = c(\"No\", \"Yes\")),\n    PhysActivity = factor(PhysActivity, labels = c(\"No\", \"Yes\")),\n    Fruits = factor(Fruits, labels = c(\"No\", \"Yes\")),\n    Veggies = factor(Veggies, labels = c(\"No\", \"Yes\")),\n    HvyAlcoholConsump = factor(HvyAlcoholConsump, labels = c(\"No\", \"Yes\")),\n    AnyHealthcare = factor(AnyHealthcare, labels = c(\"No\", \"Yes\")),\n    NoDocbcCost = factor(NoDocbcCost, labels = c(\"No\", \"Yes\")),\n    DiffWalk = factor(DiffWalk, labels = c(\"No\", \"Yes\")),\n    Sex = factor(Sex, labels = c(\"Female\", \"Male\"))\n  ) %&gt;%\n  mutate(\n    GenHlth = factor(GenHlth, ordered = TRUE, levels = c(1, 2, 3, 4, 5),\n                     labels = c(\"Excellent\", \"Very Good\", \"Good\", \"Fair\", \"Poor\")),\n    Age = factor(Age, ordered = TRUE, levels = 1:13,\n                 labels = c(\"18–24\", \"25–29\", \"30–34\", \"35–39\", \"40–44\", \"45–49\", \"50–54\",\n                            \"55–59\", \"60–64\", \"65–69\", \"70–74\", \"75–79\", \"80 or older\")),\n    Education = factor(Education, ordered = TRUE, levels = 1:6,\n                       labels = c(\"No schooling\", \"Elementary\", \"Some high school\",\n                                  \"High school graduate\", \"Some college\", \"College graduate\")),\n    Income = factor(Income, ordered = TRUE, levels = 1:8,\n                    labels = c(\"&lt;$10,000\", \"$10,000–$15,000\", \"$15,000–$20,000\",\n                               \"$20,000–$25,000\", \"$25,000–$35,000\", \"$35,000–$50,000\",\n                               \"$50,000–$75,000\", \"≥$75,000\"))\n  )"
  },
  {
    "objectID": "Modelling.html#data-splitting",
    "href": "Modelling.html#data-splitting",
    "title": "Modelling",
    "section": "Data Splitting",
    "text": "Data Splitting\n\nset.seed(123)\n\n# Splitting the dataset\ndata_split &lt;- initial_split(data, prop = 0.7, strata = Diabetes_binary)\ntrain_data &lt;- training(data_split)\ntest_data &lt;- testing(data_split)"
  },
  {
    "objectID": "Modelling.html#classification-tree-model",
    "href": "Modelling.html#classification-tree-model",
    "title": "Modelling",
    "section": "Classification Tree Model",
    "text": "Classification Tree Model\n\ntree_spec &lt;- decision_tree(\n  cost_complexity = tune(),\n  tree_depth = NULL,\n  min_n = NULL\n) %&gt;%\n  set_engine(\"rpart\") %&gt;%\n  set_mode(\"classification\")\n\ntree_recipe &lt;- recipe(Diabetes_binary ~ BMI + Age + HighBP + PhysActivity + GenHlth, data = train_data) %&gt;%\n  step_dummy(all_nominal_predictors())\n\n\nCross validsation\n\ntree_folds &lt;- vfold_cv(train_data, v = 5, strata = Diabetes_binary)\n\ntree_workflow &lt;- workflow() %&gt;%\n  add_model(tree_spec) %&gt;%\n  add_recipe(tree_recipe)\n\ntree_grid &lt;- grid_regular(cost_complexity(range = c(-4, -1)), levels = 10)\n\n\n\nTraining And Tuning\n\ntree_metrics &lt;- metric_set(mn_log_loss)\ntree_tuned &lt;- tune_grid(\n  tree_workflow,\n  resamples = tree_folds,\n  grid = tree_grid,\n  metrics = tree_metrics\n)\n\n\n\nResults\n\ntree_results &lt;- tree_tuned %&gt;%\n  collect_metrics()\n\nbest_tree &lt;- tree_tuned %&gt;%\n  select_best(metric = \"mn_log_loss\")\n\nbest_tree\n\n# A tibble: 1 × 2\n  cost_complexity .config              \n            &lt;dbl&gt; &lt;chr&gt;                \n1          0.0001 Preprocessor1_Model01\n\n\n\n\nFinal Model\n\nfinal_tree_workflow &lt;- tree_workflow %&gt;%\n  finalize_workflow(best_tree)\n\nfinal_tree_fit &lt;- final_tree_workflow %&gt;%\n  fit(data = train_data)\n\n\n\nTree Visualization\n\n# Plot the decision tree\n# str(final_tree_fit)\nrpart.plot(extract_fit_parsnip(final_tree_fit)$fit)\n\nWarning: Cannot retrieve the data used to build the model (model.frame: object '..y' not found).\nTo silence this warning:\n    Call rpart.plot with roundint=FALSE,\n    or rebuild the rpart model with model=TRUE.\n\n\nWarning: labs do not fit even at cex 0.15, there may be some overplotting"
  },
  {
    "objectID": "Modelling.html#random-forest-model",
    "href": "Modelling.html#random-forest-model",
    "title": "Modelling",
    "section": "Random Forest Model",
    "text": "Random Forest Model\n\nrf_spec &lt;- rand_forest(\n  mtry = tune(),\n  trees = 500,\n  min_n = NULL\n) %&gt;%\n  set_engine(\"ranger\", importance = \"impurity\") %&gt;%\n  set_mode(\"classification\")\n\n\nrf_workflow &lt;- workflow() %&gt;%\n  add_model(rf_spec) %&gt;%\n  add_recipe(tree_recipe)\n\nrf_grid &lt;- grid_regular(mtry(range = c(1, 5)), levels = 5)\n\nrf_tuned &lt;- tune_grid(\n  rf_workflow,\n  resamples = tree_folds,\n  grid = rf_grid,\n  metrics = tree_metrics\n)\n\n\nrf_results &lt;- rf_tuned %&gt;%\n  collect_metrics()\n\n# Find the best hyperparameter\nbest_rf &lt;- rf_tuned %&gt;%\n  select_best(metric = \"mn_log_loss\")\n\nbest_rf\n\n# A tibble: 1 × 2\n   mtry .config             \n  &lt;int&gt; &lt;chr&gt;               \n1     5 Preprocessor1_Model5\n\n\n\nFinal RF model\n\nfinal_rf_workflow &lt;- rf_workflow %&gt;%\n  finalize_workflow(best_rf)\n\n# Fit the final model\nfinal_rf_fit &lt;- final_rf_workflow %&gt;%\n  fit(data = train_data)\n\n\n\nFeature Importance\n\nrf_importance &lt;- final_rf_fit %&gt;%\n  extract_fit_parsnip() %&gt;%\n  vip::vip()\n\n# Plot variable importance\nrf_importance"
  },
  {
    "objectID": "Modelling.html#model-evaluation-on-test-data",
    "href": "Modelling.html#model-evaluation-on-test-data",
    "title": "Modelling",
    "section": "Model Evaluation on Test Data",
    "text": "Model Evaluation on Test Data\n\nClassification Tree\n\ntree_probs &lt;- predict(final_tree_fit, test_data, type = \"prob\")\n\ntree_results &lt;- tree_probs %&gt;%\n  bind_cols(truth = test_data$Diabetes_binary)\ntree_results &lt;- tree_results %&gt;%\n  mutate(truth = factor(truth, levels = c(\"No\", \"Yes\")))\n\n# Calculate log-loss using only the probabilities for the 'Yes' class\ntree_log_loss &lt;- mn_log_loss(tree_results, truth = truth, .pred_Yes, event_level = \"second\")\n\ntree_log_loss\n\n# A tibble: 1 × 3\n  .metric     .estimator .estimate\n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt;\n1 mn_log_loss binary         0.348\n\n\n\n\nRandom Forest\n\nrf_probs &lt;- predict(final_rf_fit, test_data, type = \"prob\")\n\nrf_results &lt;- rf_probs %&gt;%\n  bind_cols(truth = test_data$Diabetes_binary)\nrf_results &lt;- rf_results %&gt;%\n  mutate(truth = factor(truth, levels = c(\"No\", \"Yes\")))\n\n# Calculate log-loss using only the probabilities for the 'Yes' class\nrf_log_loss &lt;- mn_log_loss(rf_results, truth = truth, .pred_Yes, event_level = \"second\")\nrf_log_loss\n\n# A tibble: 1 × 3\n  .metric     .estimator .estimate\n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt;\n1 mn_log_loss binary         0.322\n\n\n\n\nComparison\n\nmodel_performance &lt;- tibble(\n  Model = c(\"Classification Tree\", \"Random Forest\"),\n  Log_Loss = c(tree_log_loss$.estimate, rf_log_loss$.estimate)\n)\n\nmodel_performance\n\n# A tibble: 2 × 2\n  Model               Log_Loss\n  &lt;chr&gt;                  &lt;dbl&gt;\n1 Classification Tree    0.348\n2 Random Forest          0.322"
  },
  {
    "objectID": "Modelling.html#conclusion",
    "href": "Modelling.html#conclusion",
    "title": "Modelling",
    "section": "Conclusion",
    "text": "Conclusion\nBased on log-loss metric calculation, Random forest model outperforms the classification tree model on the test dataset. This model will be selected as the final model for deployment."
  }
]